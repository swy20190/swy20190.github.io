<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>limits.h详解</title>
      <link href="/2020/05/13/limits-h-xiang-jie/"/>
      <url>/2020/05/13/limits-h-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="lt-limits-h-gt"><a href="#lt-limits-h-gt" class="headerlink" title="&lt;limits.h&gt;"></a>&lt;limits.h&gt;</h3><p>头文件&lt;limits.h&gt;定义了一些表示整型大小的常量。以下所列的值是可接受的最小值，在实际系统中可以使用更大的值。<br>|宏|值|备注|<br>|-|-|-|<br>|CHAR_BIT| 8| char 类型的位数|<br>|CHAR_MAX| UCHAR_MAX 或 SCHAR_MAX| char 类型的最大值|<br>|CHAR_MIN| 0 或 SCHAR_MIN| char 类型的最小值|<br>|INT_MAX |32767| int 类型的最大值|<br>|INT_MIN| -32767| int 类型的最小值 |<br>|LONG_MAX| 2147483647| long 类型的最大值|<br>|LONG_MIN| -2147483647| long 类型的最小值|<br>|SCHAR_MAX| +127| signed char 类型的最大值|<br>|SCHAR_MIN| -127| signed char 类型的最小值|<br>|SHRT_MAX| +32767 |short 类型的最大值|<br>|SHRT_MIN| -32767| short 类型的最小值 |<br>|UCHAR_MAX| 255| unsigned char 类型的最大值|<br>|UINT_MAX| 65535| unsigend int 类型的最大值|<br>|ULONG_MAX| 4294967295| unsigned long 类型的最大值|<br>|USHRT_MAX| 65535| unsigned short 类型的最大值 |</p><h3 id="lt-float-h-gt"><a href="#lt-float-h-gt" class="headerlink" title="&lt;float.h&gt;"></a>&lt;float.h&gt;</h3><p>下表列出的名字是&lt;float.h&gt;的一个子集，它们是与浮点算术运算相关的一些常量。给出的每个值代表相应量的最小取值。各个实现可以定义适当的值。<br>|宏|值|备注|<br>|-|-|-|<br>|FLT_RADIX| 2| 指数表示的基数，例如 2、16|<br>|FLT_ROUNDS|-1（无法确定）；0（趋向于0）；1（趋向最近的值）；2（趋向于正无穷）；3（趋向于负无穷）|  加法的浮点舍入模式|<br>|FLT_DIG| 6| 表示精度的十进制数字|<br>|FLT_EPSILON| 1E-5| 最小的数 x，x 满足：1.0 + x ≠ 1.0|<br>|FLT_MANT_DIG|-|  尾数中的数（以 FLT_RADIX 为基数）|<br>|FLT_MAX| 1E+37| 最大的浮点数|<br>|FLT_MAX_EXP|-|  最大的数 n，n 满足 FLT_RADIX^n-1 仍是可表示的|<br>|FLT_MIN| 1E-37| 最小的规格化浮点数|<br>|FLT_MIN_EXP|-|  最小的数 n，n 满足：10^n是一个规格化数|<br>|DBL_DIG| 10| 表示精度的十进制数字|<br>|DBL_EPSILON| 1E-9| 最小的数 x，x 满足：1.0 + x ≠ 1.0|<br>|DBL_MANT_DIG|-|  尾数中的数（以 FLT_RADIX 为基数）|<br>|DBL_MAX| 1E+37| 最大的双精度浮点数 |<br>|DBL_MAX_EXP|-|  最大的数 n，n 满足 FLT_RADIX^n-1 仍是可表示的|<br>|DBL_MIN| 1E-37| 最小的规格化双精度浮点数|<br>|DBL_MIN_EXP|-|  最小的数 n，n 满足：10n是一个规格化数 |</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="lt-limits-h-gt-1"><a href="#lt-limits-h-gt-1" class="headerlink" title="&lt;limits.h&gt;"></a>&lt;limits.h&gt;</h3><p>代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;limits.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The number of bits in a byte %d\n"</span><span class="token punctuation">,</span> CHAR_BIT<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The minimum value of SIGNED CHAR = %d\n"</span><span class="token punctuation">,</span> SCHAR_MIN<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The maximum value of SIGNED CHAR = %d\n"</span><span class="token punctuation">,</span> SCHAR_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The maximum value of UNSIGNED CHAR = %d\n"</span><span class="token punctuation">,</span> UCHAR_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The minimum value of SHORT INT = %d\n"</span><span class="token punctuation">,</span> SHRT_MIN<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The maximum value of SHORT INT = %d\n"</span><span class="token punctuation">,</span> SHRT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The minimum value of INT = %d\n"</span><span class="token punctuation">,</span> INT_MIN<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The maximum value of INT = %d\n"</span><span class="token punctuation">,</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The minimum value of CHAR = %d\n"</span><span class="token punctuation">,</span> CHAR_MIN<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The maximum value of CHAR = %d\n"</span><span class="token punctuation">,</span> CHAR_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The minimum value of LONG = %ld\n"</span><span class="token punctuation">,</span> LONG_MIN<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The maximum value of LONG = %ld\n"</span><span class="token punctuation">,</span> LONG_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出：</p><pre class=" language-bash"><code class="language-bash">PS G:\CSAPP<span class="token operator">></span>  <span class="token operator">&amp;</span> <span class="token string">'c:\Users\swy\.vscode\extensions\ms-vscode.cpptools-0.27.1\debugAdapters\bin\WindowsDebugLauncher.exe'</span> <span class="token string">'--stdin=Microsoft-MIEngine-In-mq52rrfg.0x4'</span> <span class="token string">'--stdout=Microsoft-MIEngine-Out-ip53akbp.xpk'</span> <span class="token string">'--stderr=Microsoft-MIEngine-Error-w2wgdudi.u2t'</span> <span class="token string">'--pid=Microsoft-MIEngine-Pid-2z44vy4h.eqv'</span> <span class="token string">'--dbgExe=G:\x86_64-8.1.0-release-posix-sjlj-rt_v6-rev0\mingw64\bin\gdb.exe'</span> <span class="token string">'--interpreter=mi'</span>The number of bits <span class="token keyword">in</span> a byte 8The minimum value of SIGNED CHAR <span class="token operator">=</span> -128The maximum value of SIGNED CHAR <span class="token operator">=</span> 127The maximum value of UNSIGNED CHAR <span class="token operator">=</span> 255The minimum value of SHORT INT <span class="token operator">=</span> -32768The maximum value of SHORT INT <span class="token operator">=</span> 32767The minimum value of INT <span class="token operator">=</span> -2147483648The maximum value of INT <span class="token operator">=</span> 2147483647The minimum value of CHAR <span class="token operator">=</span> -128The maximum value of CHAR <span class="token operator">=</span> 127The minimum value of LONG <span class="token operator">=</span> -2147483648The maximum value of LONG <span class="token operator">=</span> 2147483647PS G:\CSAPP<span class="token operator">></span></code></pre><h3 id="lt-float-h-gt-1"><a href="#lt-float-h-gt-1" class="headerlink" title="&lt;float.h&gt;"></a>&lt;float.h&gt;</h3><p>代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;float.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The maximum value of float = %.10e\n"</span><span class="token punctuation">,</span> FLT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The minimum value of float = %.10e\n"</span><span class="token punctuation">,</span> FLT_MIN<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The number of digits in the number = %.10e\n"</span><span class="token punctuation">,</span> FLT_MANT_DIG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出：</p><pre class=" language-bash"><code class="language-bash">PS G:\CSAPP<span class="token operator">></span>  <span class="token operator">&amp;</span> <span class="token string">'c:\Users\swy\.vscode\extensions\ms-vscode.cpptools-0.27.1\debugAdapters\bin\WindowsDebugLauncher.exe'</span> <span class="token string">'--stdin=Microsoft-MIEngine-In-vvxt3sdn.m45'</span> <span class="token string">'--stdout=Microsoft-MIEngine-Out-lxfp3hgw.ny4'</span> <span class="token string">'--stderr=Microsoft-MIEngine-Error-uyop3yxf.gya'</span> <span class="token string">'--pid=Microsoft-MIEngine-Pid-flbfwpeh.hj3'</span> <span class="token string">'--dbgExe=G:\x86_64-8.1.0-release-posix-sjlj-rt_v6-rev0\mingw64\bin\gdb.exe'</span> <span class="token string">'--interpreter=mi'</span> The maximum value of float <span class="token operator">=</span> 3.4028234664e+038The minimum value of float <span class="token operator">=</span> 1.1754943508e-038The number of digits <span class="token keyword">in</span> the number <span class="token operator">=</span> 1.1857575500e-322PS G:\CSAPP<span class="token operator">></span> </code></pre>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hsqldb源代码阅读（一）</title>
      <link href="/2020/04/07/hsqldb-yuan-dai-ma-yue-du-yi/"/>
      <url>/2020/04/07/hsqldb-yuan-dai-ma-yue-du-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="hsqldb-源代码阅读（一）"><a href="#hsqldb-源代码阅读（一）" class="headerlink" title="hsqldb 源代码阅读（一）"></a>hsqldb 源代码阅读（一）</h1><h2 id="服务器启动与初始化"><a href="#服务器启动与初始化" class="headerlink" title="服务器启动与初始化"></a>服务器启动与初始化</h2><p>以debug模式启动服务器，到如图断点<br><img src="./1.png" alt><br>观察此时的调用堆栈：<br><img src="./2.png" alt><br>从下至上，为</p><ul><li>run:310, Server$ServerThread(org.hsqldb.server): 这是开启了一个服务器线程</li><li>access$000:238,Server(org.hsqldb.server): 这里应该是实例化一个Server</li><li>run:2029,Server(org.hsqldb,server): 这里是启动这个Server</li><li>openDatabase:1695,Server(org.hsqldb.server): 这里是尝试打开一个初始的database文件</li><li>getDatabase:184,DatabaseManager(org.hsqldb): 这里利用上面打开的database文件实例化一个database对象</li><li>getDatabase:243,DatabaseManager(org.hsqldb): 同上</li></ul><p>继续运行，到如图断点：<br><img src="./3.png" alt><br>堆栈新增：getDatabase:259,DatabaseManager(org.hsqldb) 开启初始数据库<br>继续运行，到如图断点：<br><img src="./4.png" alt><br>堆栈新增：createObjectStructures:307,Database(org.sqldb) 此处应该是加载初始数据库的元数据<br>继续运行，到如图断点：<br><img src="./5.png" alt><br>注意，此时堆栈新增了较多数据，我们从下至上来看：</p><ul><li>newDatabaseInformation:338,DatabaseInformation(org.hsqldb.dbinfo): 创建元数据的实例</li><li>newInstance: 423,Constructor(java.lang.reflect): 构建constructoraccessor，也就是数据库文件的slot模型</li><li>newInstance:45,DelegatingConstructorAccessorImpl(sun.reflect): 同上</li><li>newInstance:62,NativeConstructorAccessorImpl(sun.reflect): 同上</li><li>newInstance0:-1,NativeConstructorlmpl(sun.reflect): 同上</li><li><init>:157,DatabaseInformationFull(org.hsqldb.dbinfo): 将元数据与数据库绑定</init></li><li><init>:200,DatabaseInformationMain(org.hsqldb.dbinfo): 为系统表分配内存，底层数据结构为普通的数组</init></li></ul><p>继续运行，到如图断点：<br><img src="./6.png" alt><br>此时的调用栈;</p><ul><li><init>:231,DatabaseInformationMain(org.hsqldb.dbinfo): 和session有关</init></li><li><init>:382,DatabaseInformationMain(org.hsqldb.dbinfo): 开始初始化系统表</init></li></ul><p>继续运行，到如图断点：<br><img src="./7.png" alt><br>此时调用栈有较大变化，我们从下至上看：</p><ul><li>init:383,DatabaseInformationMain(org.hsqldb.dbinfo): 同上</li><li>generateTable:423,DatabaseInformationFull(org.hsqldb.dbinfo): 同下</li><li>generateTable:305,DatabaseInformationMain(org.hsqldb.dbinfo): 同下</li><li>SYSTEM_BESTROWIDENTIFIER:652,DatabaseInformationMain(org.hsqldb.dbinfo): 建立主键关系约束</li><li>createPrimaryKeyConstraint:1802,Table(org.hsqldb): 同上</li><li>createPrimaryKey:1795,Table(org.hsqldb): 确定哪一个属性是主键</li></ul><p>继续运行，到如图断点：<br><img src="./8.png" alt><br>createPrimaryIndex:363,TableBase(org.hsqldb): 准备建立索引表，创建根节点（索引表的底层数据结构是B+树）<br>继续运行，到如上图368行断点：<br>就是建立树的过程，把节点逐一地添加到树上<br>继续运行，你会发现进入到上两个图之间的循环，就是初始化索引表，然后索引表每个节点对应的表初始化一遍。<br>在循环中，继续运行，到如图断点：<br><img src="./9.png" alt><br>为创建的表添加约束<br>之和继续循环，23333<br>继续运行，到如下断点：<br><img src="./10.png" alt><br>这里好像是有关自动提交的，我不确定<br>继续运行，到如下断点：<br><img src="./11.png" alt><br>堆栈情况：</p><ul><li>processScript:734,Log(org.hsqldb.persist): 从创建的脚本读入session。这里的scr类似文件流。</li><li>readAll:115,ScriptReaderText(org.hsqldb.scriptio): 读入数据定义语言（DDL）</li><li>readDDL:143,ScriptReaderText(org.hsqldb.scriptio): 加载编译过的DDL</li><li>executeCompiledStatement:1419,Session(org.hsqldb): 不明</li></ul><p>继续运行，到如上上图断点，进入循环<br>然后会循环到之前索引表的部分，继续运行，循环结束，如下图：<br><img src="./12.png" alt><br>在这个位置会循环一段时间，应该是逐一地从系统表按顺序获得节点，然后把这个节点插入到B+蜀上（注释中写的是AVL树，B+树其实是AVL树的一种）<br>继续运行，程序没有反应，可知此时初始化已经完毕，服务器处于监听状态。我们结束Server运行，并以run模式重新运行之，准备下面的对客户端的代码阅读</p><h2 id="客户端启动与初始化"><a href="#客户端启动与初始化" class="headerlink" title="客户端启动与初始化"></a>客户端启动与初始化</h2><p>以debug模式运行DatabaseManagerSwing，至第一个断点，如下：<br><img src="./13.png" alt><br>我们看看堆栈的变化：</p><ul><li>connect:228,JDBCDriver</li><li>getConnection:277,JDBCDriver</li><li><init>:3434,JDBCConnecion: 以上三步都是通过JDBC连接数据库，因为hsqldb的前端是Java AWT写的，连接到服务器需要通过JDBC</init></li><li>newSession:157,DatabaseManager: 获得database的实例</li></ul><p>继续运行，到如下断点：<br><img src="./14.png" alt><br>开启这个数据库（与前面服务器的初始化很像）<br>继续运行，到如下断点：<br><img src="./15.png" alt><br>之后一段完全是服务器初始化的再现<br>大段循环之后，客户端进入监听模式，如下图：<br><img src="./16.png" alt></p><h2 id="数据库创建表，插入-删除数据"><a href="#数据库创建表，插入-删除数据" class="headerlink" title="数据库创建表，插入/删除数据"></a>数据库创建表，插入/删除数据</h2><p>在客户端执行</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> personmem<span class="token punctuation">(</span>id char<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>age <span class="token keyword">int</span><span class="token punctuation">,</span>undergraduate <span class="token keyword">boolean</span><span class="token punctuation">,</span>birth_year <span class="token keyword">numeric</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>birthdate <span class="token keyword">date</span><span class="token punctuation">,</span><span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>再执行</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> personmem <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'00000001'</span><span class="token punctuation">,</span> <span class="token string">'student1'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">1995</span><span class="token punctuation">,</span> <span class="token string">'1995-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> personmem <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'00000002'</span><span class="token punctuation">,</span> <span class="token string">'student2'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">1995</span><span class="token punctuation">,</span> <span class="token string">'1995-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> personmem <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token string">'00000002'</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> personmem <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'00000003'</span><span class="token punctuation">,</span> <span class="token string">'student3'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">1995</span><span class="token punctuation">,</span> <span class="token string">'1995-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>script文件变化如下：<br><img src="./17.png" alt><br>行了，就到这里。</p><p>好了，我又回来了<br>现在我们研究cached table 在底层的存储机制<br>我们观察test.log,test.script,test.data这三个文件<br>首先，把之前实验的personmem删掉</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> personmem</code></pre><p>然后，在客户端进行以下输入：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> cached <span class="token keyword">table</span> personcache<span class="token punctuation">(</span>id char<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>age <span class="token keyword">int</span><span class="token punctuation">,</span>undergraduate <span class="token keyword">boolean</span><span class="token punctuation">,</span>birth_year <span class="token keyword">numeric</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>birthdate <span class="token keyword">date</span><span class="token punctuation">,</span><span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> personcache <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'00000001'</span><span class="token punctuation">,</span> <span class="token string">'student1'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">1995</span><span class="token punctuation">,</span> <span class="token string">'1995-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> personcache <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'00000002'</span><span class="token punctuation">,</span> <span class="token string">'student2'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">1995</span><span class="token punctuation">,</span> <span class="token string">'1995-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> personcache <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token string">'00000002'</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> personcache <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'00000003'</span><span class="token punctuation">,</span> <span class="token string">'student3'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">1995</span><span class="token punctuation">,</span> <span class="token string">'1995-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>看到，log文件变化如下：<br><img src="./18.png" alt><br>注意，这里没有设置检查点，所以log文件所有的变化都按照时间被显示出来<br>设置检查点，输入checkpoint .log文件清空, .script文件记录数据，生成.data文件：<br>.script文件：<br><img src="./19.png" alt><br>.data文件：<br><img src="./20.png" alt><br>我们可以发现，这里对于永久数据的写入采取了“懒惰”策略，即关于先被插入，后被删除的student2的数据没有在.script中出现<br>下面我们研究一下text table在hsqldb底层的实现<br>首先，我们把之前的cached table drop掉</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> personcache</code></pre><p>设置检查点</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">checkpoint</span></code></pre><p>然后输入如下：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">text</span> <span class="token keyword">table</span> persontext<span class="token punctuation">(</span>id char<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>age <span class="token keyword">int</span><span class="token punctuation">,</span>undergraduate <span class="token keyword">boolean</span><span class="token punctuation">,</span>birth_year <span class="token keyword">numeric</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>birthdate <span class="token keyword">date</span><span class="token punctuation">,</span><span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SET</span> <span class="token keyword">TABLE</span> <span class="token keyword">PUBLIC</span><span class="token punctuation">.</span>persontext SOURCE <span class="token string">"persontextdata;fs=|"</span><span class="token punctuation">;</span></code></pre><p>以上两句要分开输入，否则会报错<br>.log文件如下：<br><img src="./21.png" alt><br>然后输入以下语句：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> persontext <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'00000001'</span><span class="token punctuation">,</span> <span class="token string">'student1'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">1995</span><span class="token punctuation">,</span> <span class="token string">'1995-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> persontext <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'00000002'</span><span class="token punctuation">,</span> <span class="token string">'student2'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">1995</span><span class="token punctuation">,</span> <span class="token string">'1995-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> persontext <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token string">'00000002'</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> persontext <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'00000003'</span><span class="token punctuation">,</span> <span class="token string">'student3'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">1995</span><span class="token punctuation">,</span> <span class="token string">'1995-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>.log文件如下：<br><img src="./22.png" alt><br>设置检查点后：<br>.log清空<br>.script记录元数据：<br><img src="./23.png" alt><br>在.log文件的同级目录下多出了一个名为persontextdata的文件：<br><img src="./24.png" alt></p><p>那么，缓存的替换机制是怎样的？<br>缓存是以row为单位的。当要提交一个插入的行时，先检查它是否在缓存内。若是，则加入缓存。然后，在缓存中把这个row标记为已经读入主存，以免重复读入。<br>缓存的容量如何管理？<br>两个变量exceedsCount与exceedsSize分别记录row条数与总量大小是否超过当前分配的内存限制。如果超了，逐一地增加分配的单元。更新之后，检查二者是否有为0的，如果有，就把这块内存清除（相当于垃圾回收）</p><p>Cached/Text Table 增删改数据时外存文件的变化？</p><ul><li>Cached Table无论如何操作，都不会对外存文件有影响</li><li>Text Table只有在设置检查点后，才会写入外存文件，而且写入的是当前的状态，不记录插入或删除的历史。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>return as lightning</title>
      <link href="/2020/04/07/return-as-lightning/"/>
      <url>/2020/04/07/return-as-lightning/</url>
      
        <content type="html"><![CDATA[<h1 id="Congratulations-to-My-Reborn"><a href="#Congratulations-to-My-Reborn" class="headerlink" title="Congratulations to My Reborn!"></a>Congratulations to My Reborn!</h1><p>This blog is going to be updated with <a href="https://blog.csdn.net/swy_swy_swy/article/list?orderby=ViewCount" target="_blank" rel="noopener">CSDN</a> concurrently.</p><p><img src="./return.png" alt></p><center>C.C.C.P. (1922-1953) Dead but Immortal</center>]]></content>
      
      
      
        <tags>
            
            <tag> C.C.C.P. </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>csapp-solution</title>
      <link href="/2020/04/06/csapp-solution/"/>
      <url>/2020/04/06/csapp-solution/</url>
      
        <content type="html"><![CDATA[<h1 id="《CSAPP》答案合集"><a href="#《CSAPP》答案合集" class="headerlink" title="《CSAPP》答案合集"></a>《CSAPP》答案合集</h1><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a><a href="https://blog.csdn.net/swy_swy_swy/article/details/105337968" target="_blank" rel="noopener">第一章</a></h2><h2 id="第二章（一）"><a href="#第二章（一）" class="headerlink" title="第二章（一）"></a><a href="https://blog.csdn.net/swy_swy_swy/article/details/105052576" target="_blank" rel="noopener">第二章（一）</a></h2><h2 id="第二章（二）"><a href="#第二章（二）" class="headerlink" title="第二章（二）"></a><a href="https://blog.csdn.net/swy_swy_swy/article/details/105076817" target="_blank" rel="noopener">第二章（二）</a></h2><h2 id="第二章（三）"><a href="#第二章（三）" class="headerlink" title="第二章（三）"></a><a href="https://blog.csdn.net/swy_swy_swy/article/details/105106512" target="_blank" rel="noopener">第二章（三）</a></h2><h2 id="第三章（一）"><a href="#第三章（一）" class="headerlink" title="第三章（一）"></a><a href="https://blog.csdn.net/swy_swy_swy/article/details/105120652" target="_blank" rel="noopener">第三章（一）</a></h2><h2 id="第三章（二）"><a href="#第三章（二）" class="headerlink" title="第三章（二）"></a><a href="https://blog.csdn.net/swy_swy_swy/article/details/105133569" target="_blank" rel="noopener">第三章（二）</a></h2><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a><a href="https://blog.csdn.net/swy_swy_swy/article/details/105158846" target="_blank" rel="noopener">第四章</a></h2><h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a><a href="https://blog.csdn.net/swy_swy_swy/article/details/105186085" target="_blank" rel="noopener">第五章</a></h2><h2 id="第六章（一）"><a href="#第六章（一）" class="headerlink" title="第六章（一）"></a><a href="https://blog.csdn.net/swy_swy_swy/article/details/105207680" target="_blank" rel="noopener">第六章（一）</a></h2><h2 id="第六章（二）"><a href="#第六章（二）" class="headerlink" title="第六章（二）"></a><a href="https://blog.csdn.net/swy_swy_swy/article/details/105214235" target="_blank" rel="noopener">第六章（二）</a></h2><h2 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a><a href="https://blog.csdn.net/swy_swy_swy/article/details/105228051" target="_blank" rel="noopener">第七章</a></h2><h2 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a><a href="https://blog.csdn.net/swy_swy_swy/article/details/105272789" target="_blank" rel="noopener">第八章</a></h2><h2 id="第九章"><a href="#第九章" class="headerlink" title="第九章"></a><a href="https://blog.csdn.net/swy_swy_swy/article/details/105295992" target="_blank" rel="noopener">第九章</a></h2><h2 id="第十章"><a href="#第十章" class="headerlink" title="第十章"></a><a href="https://blog.csdn.net/swy_swy_swy/article/details/105301476" target="_blank" rel="noopener">第十章</a></h2><h2 id="第十一章"><a href="#第十一章" class="headerlink" title="第十一章"></a><a href="https://blog.csdn.net/swy_swy_swy/article/details/105302169" target="_blank" rel="noopener">第十一章</a></h2><h2 id="第十二章（一）"><a href="#第十二章（一）" class="headerlink" title="第十二章（一）"></a><a href="https://blog.csdn.net/swy_swy_swy/article/details/105306176" target="_blank" rel="noopener">第十二章（一）</a></h2><h2 id="第十二章（二）"><a href="#第十二章（二）" class="headerlink" title="第十二章（二）"></a><a href="https://blog.csdn.net/swy_swy_swy/article/details/105311102" target="_blank" rel="noopener">第十二章（二）</a></h2><h2 id="开源万岁"><a href="#开源万岁" class="headerlink" title="开源万岁"></a>开源万岁</h2><p>Long live open source<br>Да здравствует открытый исходный код<br>Longue vie open source<br>عاش المصدر المفتوح<br>Larga vida al código abierto<br>Viva código-fonte aberto</p><h2 id="妻子镇帖"><a href="#妻子镇帖" class="headerlink" title="妻子镇帖"></a>妻子镇帖</h2><p><img src="./wife1.jpg" alt="my_wife"></p>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> csapp </tag>
            
            <tag> solutions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>REBORN</title>
      <link href="/2020/04/05/reborn/"/>
      <url>/2020/04/05/reborn/</url>
      
        <content type="html"><![CDATA[<h1 id="Congratulations-to-My-Reborn"><a href="#Congratulations-to-My-Reborn" class="headerlink" title="Congratulations to My Reborn!"></a>Congratulations to My Reborn!</h1><p>This blog is going to be updated with <a href="https://blog.csdn.net/swy_swy_swy/article/list?orderby=ViewCount" target="_blank" rel="noopener">CSDN</a> concurrently.</p><p><img src="./cccp_19361946.png" alt></p><center>C.C.C.P. (1922-1953) Dead but Immortal</center>]]></content>
      
      
      
        <tags>
            
            <tag> C.C.C.P </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
